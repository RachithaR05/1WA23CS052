#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int key;
    int value;
} HashMapEntry;

typedef struct {
    HashMapEntry *entries;
    int size;
    int capacity;
} HashMap;

// Function to create a HashMap
HashMap* createHashMap(int capacity) {
    HashMap *map = malloc(sizeof(HashMap));
    map->entries = malloc(sizeof(HashMapEntry) * capacity);
    map->size = 0;
    map->capacity = capacity;
    return map;
}

// Function to insert or update a value in the HashMap
void insert(HashMap *map, int key, int value) {
    for (int i = 0; i < map->size; i++) {
        if (map->entries[i].key == key) {
            map->entries[i].value += value; // Update the value
            return;
        }
    }
    // If key not found, add a new entry
    if (map->size < map->capacity) {
        map->entries[map->size].key = key;
        map->entries[map->size].value = value;
        map->size++;
    }
}

// Function to get the value for a key in the HashMap
int get(HashMap *map, int key) {
    for (int i = 0; i < map->size; i++) {
        if (map->entries[i].key == key) {
            return map->entries[i].value;
        }
    }
    return 0; // Return 0 if key not found
}

// Function to free the HashMap
void freeHashMap(HashMap *map) {
    free(map->entries);
    free(map);
}

// Function to find the number of subarrays with sum equal to k
int subarraySum(int* nums, int numsSize, int k) {
    HashMap *map = createHashMap(numsSize);
    insert(map, 0, 1); // Initialize with cumulative sum of 0
    int count = 0;
    int cumulativeSum = 0;

    for (int i = 0; i < numsSize; i++) {
        cumulativeSum += nums[i]; // Update cumulative sum

        // Check if (cumulativeSum - k) exists in the map
        count += get(map, cumulativeSum - k);

        // Update the map with the current cumulative sum
        insert(map, cumulativeSum, 1);
    }

    freeHashMap(map);
    return count;
}

int main() {
    int nums[] = {1, 1, 1}; // Example input
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    int k = 2;

    int result = subarraySum(nums, numsSize, k);
    printf("Total number of subarrays whose sum equals to %d: %d\n", k, result);

    return 0;
}
